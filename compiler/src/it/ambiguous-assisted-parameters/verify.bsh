import dagger.testing.it.BuildLogValidator;
import java.io.File;

File buildLog = new File(basedir, "build.log");
new BuildLogValidator().assertHasText(buildLog, new String[]{
    "@Assisted parameters must not be the same type unless the annotations have different values (e.g @Assisted(\"fg\") Color fg, @Assisted(\"bg\") Color bg: test.TestApp.TestClass1.TestClass1(int,java.lang.String,java.lang.String,int)"});
new BuildLogValidator().assertHasText(buildLog, new String[]{
    "@Assisted parameters must not be the same type unless the annotations have different values (e.g @Assisted(\"fg\") Color fg, @Assisted(\"bg\") Color bg: test.TestApp.TestClass2.TestClass2(int,int,int,java.lang.String)"});
new BuildLogValidator().assertHasText(buildLog, new String[]{
    "@Assisted parameters must not be the same type unless the annotations have different values (e.g @Assisted(\"fg\") Color fg, @Assisted(\"bg\") Color bg: test.TestApp.TestClass3.TestClass3(int,java.util.List<java.lang.String>,java.util.List<java.lang.String>,java.lang.String)"});
new BuildLogValidator().assertHasText(buildLog, new String[]{
    "@Assisted parameters must not be the same type unless the annotations have different values (e.g @Assisted(\"fg\") Color fg, @Assisted(\"bg\") Color bg: test.TestApp.TestClass4.TestClass4(int,java.lang.String,java.lang.String,int)"});
new BuildLogValidator().assertHasText(buildLog, new String[]{
    "@Assisted parameters must not be the same type unless the annotations have different values (e.g @Assisted(\"fg\") Color fg, @Assisted(\"bg\") Color bg: test.TestApp.TestClass4.TestClass4(int,int,int,java.lang.String)"});
new BuildLogValidator().assertHasText(buildLog, new String[]{
    "@Assisted parameters must not be the same type unless the annotations have different values (e.g @Assisted(\"fg\") Color fg, @Assisted(\"bg\") Color bg: test.TestApp.TestClass4.TestClass4(int,java.util.List<java.lang.String>,java.util.List<java.lang.String>,java.lang.String)"});

    
     